import{_ as i,o,c,a as e,b as d,e as a,d as n,r as t}from"./app.175e3b52.js";const r={},l=a(`<h1 id="costruire-misskey-tramite-docker" tabindex="-1"><a class="header-anchor" href="#costruire-misskey-tramite-docker" aria-hidden="true">#</a> Costruire Misskey tramite Docker</h1><p>Questa guida spiega come installare Misskey dentro Docker</p><div class="custom-container tip"><i class="fas fa-info"></i><p>Requisiti iniziali: installare <strong>Docker</strong> e <strong>docker-compose</strong></p></div><h2 id="ottieni-il-codice-sorgente" tabindex="-1"><a class="header-anchor" href="#ottieni-il-codice-sorgente" aria-hidden="true">#</a> Ottieni il codice sorgente</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone -b master https://github.com/misskey-dev/misskey.git
<span class="token builtin class-name">cd</span> misskey
<span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="variabili-d-ambiente" tabindex="-1"><a class="header-anchor" href="#variabili-d-ambiente" aria-hidden="true">#</a> Variabili d&#39;ambiente</h2><p>Copia la configurazione d&#39;esempio, su quella di default.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> .config/example.yml .config/default.yml
<span class="token function">cp</span> .config/docker_example.env .config/docker.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Modificare sia <code>default.yml</code> che <code>docker.env</code> come indicato nei file.</p><div class="custom-container warning"><i class="fas fa-exclamation"></i><p>Il file <code>default.yml</code> imposta PostgreSQL e Redis come container <code>db</code> e <code>redis</code></p></div><p>Modificare <code>docker-compose.yml</code> secondo le necessit\xE0 (ad esempio se intendi cambiare porta)</p><h2 id="costruzione-e-inizializzazione" tabindex="-1"><a class="header-anchor" href="#costruzione-e-inizializzazione" aria-hidden="true">#</a> Costruzione e inizializzazione</h2><p>Costruisci i container necessari e popola il database.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> build
<span class="token function">sudo</span> <span class="token function">docker-compose</span> run --rm web <span class="token function">yarn</span> run init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avvio" tabindex="-1"><a class="header-anchor" href="#avvio" aria-hidden="true">#</a> Avvio</h2><p>Questo comando avvia i container e li imposta come servizio al riavvio.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="aggiornare-misskey-in-docker" tabindex="-1"><a class="header-anchor" href="#aggiornare-misskey-in-docker" aria-hidden="true">#</a> Aggiornare Misskey in Docker</h2>`,18),u={class:"custom-container warning"},p=e("i",{class:"fas fa-exclamation"},null,-1),m=n("Prima di procedere, leggiti le "),h={href:"https://github.com/misskey-dev/misskey/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},v=n("Note di rilascio"),b=n(" per verificare se ci siano attivit\xE0 aggiuntive da svolgere."),g=a(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> stash
<span class="token function">git</span> checkout master
<span class="token function">git</span> pull
<span class="token function">git</span> submodule update --init
<span class="token function">git</span> stash pop
<span class="token function">sudo</span> <span class="token function">docker-compose</span> build
<span class="token function">sudo</span> <span class="token function">docker-compose</span> stop <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">docker-compose</span> up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;attivit\xE0 potrebbe richiedere del tempo, a seconda della grandezza del database e del contenuto dell&#39;aggiornamento.</p><h2 id="eseguire-comandi-dentro-ai-container" tabindex="-1"><a class="header-anchor" href="#eseguire-comandi-dentro-ai-container" aria-hidden="true">#</a> Eseguire comandi dentro ai Container</h2><p>Per eseguire uno script nel container <code>web</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> run --rm web <span class="token function">node</span> packages/backend/built/tools/foo bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function k(f,_){const s=t("ExternalLinkIcon");return o(),c("div",null,[l,e("div",u,[p,e("p",null,[m,e("a",h,[v,d(s)]),b])]),g])}var z=i(r,[["render",k],["__file","docker.html.vue"]]);export{z as default};
