"use strict";(self.webpackChunkmisskey_hub=self.webpackChunkmisskey_hub||[]).push([[7254],{2633:(a,s,n)=>{n.r(s),n.d(s,{default:()=>l});const e=(0,n(6252).uE)('<h1 id="misskeyリバーシbotの開発" tabindex="-1"><a class="header-anchor" href="#misskeyリバーシbotの開発" aria-hidden="true">#</a> MisskeyリバーシBotの開発</h1><p>Misskeyのリバーシ機能に対応したBotの開発方法をここに記します。</p><ol><li><p><code>games/reversi</code>ストリームに以下のパラメータを付けて接続する:</p><ul><li><code>i</code>: botアカウントのAPIキー</li></ul></li><li><p>対局への招待が来たら、ストリームから<code>invited</code>イベントが流れてくる</p><ul><li>イベントの中身に、<code>parent</code>という名前で対局へ誘ってきたユーザーの情報が含まれている</li></ul></li><li><p><code>games/reversi/match</code>へ、<code>user_id</code>として<code>parent</code>の<code>id</code>が含まれたリクエストを送信する</p></li><li><p>上手くいくとゲーム情報が返ってくるので、<code>games/reversi-game</code>ストリームへ、以下のパラメータを付けて接続する:</p><ul><li><code>i</code>: botアカウントのAPIキー</li><li><code>game</code>: <code>game</code>の<code>id</code></li></ul></li><li><p>この間、相手がゲームの設定を変更するとその都度<code>update-settings</code>イベントが流れてくるので、必要であれば何かしらの処理を行う</p></li><li><p>設定に満足したら、<code>{ type: &#39;accept&#39; }</code>メッセージをストリームに送信する</p></li><li><p>ゲームが開始すると、<code>started</code>イベントが流れてくる</p><ul><li>イベントの中身にはゲーム情報が含まれている</li></ul></li><li><p>石を打つには、ストリームに<code>{ type: &#39;set&#39;, pos: &lt;位置&gt; }</code>を送信する(位置の計算方法は後述)</p></li><li><p>相手または自分が石を打つと、ストリームから<code>set</code>イベントが流れてくる</p><ul><li><code>color</code>として石の色が含まれている</li><li><code>pos</code>として位置情報が含まれている</li></ul></li></ol><h2 id="位置の計算法" tabindex="-1"><a class="header-anchor" href="#位置の計算法" aria-hidden="true">#</a> 位置の計算法</h2><p>8x8のマップを考える場合、各マスの位置(インデックスと呼びます)は次のようになっています:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+--+--+--+--+--+--+--+--+\n| 0| 1| 2| 3| 4| 5| 6| 7|\n+--+--+--+--+--+--+--+--+\n| 8| 9|10|11|12|13|14|15|\n+--+--+--+--+--+--+--+--+\n|16|17|18|19|20|21|22|23|\n...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="x-y座標-から-インデックス-に変換する" tabindex="-1"><a class="header-anchor" href="#x-y座標-から-インデックス-に変換する" aria-hidden="true">#</a> X,Y座標 から インデックス に変換する</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pos = x + (y * mapWidth)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>mapWidth</code>は、ゲーム情報の<code>map</code>から、次のようにして計算できます:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mapWidth = map[0].length\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="インデックス-から-x-y座標-に変換する" tabindex="-1"><a class="header-anchor" href="#インデックス-から-x-y座標-に変換する" aria-hidden="true">#</a> インデックス から X,Y座標 に変換する</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>x = pos % mapWidth\ny = Math.floor(pos / mapWidth)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="マップ情報" tabindex="-1"><a class="header-anchor" href="#マップ情報" aria-hidden="true">#</a> マップ情報</h2><p>マップ情報は、ゲーム情報の<code>map</code>に入っています。 文字列の配列になっており、ひとつひとつの文字がマス情報を表しています。 それをもとにマップのデザインを知る事が出来ます:</p><ul><li><code>(スペース)</code> ... マス無し</li><li><code>-</code> ... マス</li><li><code>b</code> ... 初期配置される黒石</li><li><code>w</code> ... 初期配置される白石</li></ul><p>例えば、4*4の次のような単純なマップがあるとします:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   | ○ | ● |   |\n+---+---+---+---+\n|   | ● | ○ |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>この場合、マップデータはこのようになります:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-wb-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-bw-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;----&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="ユーザーにフォームを提示して対話可能botを作成する" tabindex="-1"><a class="header-anchor" href="#ユーザーにフォームを提示して対話可能botを作成する" aria-hidden="true">#</a> ユーザーにフォームを提示して対話可能Botを作成する</h2><p>ユーザーとのコミュニケーションを行うため、ゲームの設定画面でユーザーにフォームを提示することができます。 例えば、Botの強さをユーザーが設定できるようにする、といったシナリオが考えられます。</p><p>フォームを提示するには、<code>reversi-game</code>ストリームに次のメッセージを送信します:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;init-form&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">[</span>フォームコントロールの配列<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>フォームコントロールの配列については今から説明します。 フォームコントロールは、次のようなオブジェクトです:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token string">&#39;switch1&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;switch&#39;</span><span class="token punctuation">,</span>\n  label<span class="token operator">:</span> <span class="token string">&#39;Enable hoge&#39;</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>id</code> ... コントロールのID。 <code>type</code> ... コントロールの種類。後述します。 <code>label</code> ... コントロールと一緒に表記するテキスト。 <code>value</code> ... コントロールのデフォルト値。</p><h3 id="フォームの操作を受け取る" tabindex="-1"><a class="header-anchor" href="#フォームの操作を受け取る" aria-hidden="true">#</a> フォームの操作を受け取る</h3><p>ユーザーがフォームを操作すると、ストリームから<code>update-form</code>イベントが流れてきます。 イベントの中身には、コントロールのIDと、ユーザーが設定した値が含まれています。 例えば、上で示したスイッチをユーザーがオンにしたとすると、次のイベントが流れてきます:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token string">&#39;switch1&#39;</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="フォームコントロールの種類" tabindex="-1"><a class="header-anchor" href="#フォームコントロールの種類" aria-hidden="true">#</a> フォームコントロールの種類</h3><h4 id="スイッチ" tabindex="-1"><a class="header-anchor" href="#スイッチ" aria-hidden="true">#</a> スイッチ</h4><p>type: <code>switch</code> スイッチを表示します。何かの機能をオン/オフさせたい場合に有用です。</p><h5 id="プロパティ" tabindex="-1"><a class="header-anchor" href="#プロパティ" aria-hidden="true">#</a> プロパティ</h5><p><code>label</code> ... スイッチに表記するテキスト。</p><h4 id="ラジオボタン" tabindex="-1"><a class="header-anchor" href="#ラジオボタン" aria-hidden="true">#</a> ラジオボタン</h4><p>type: <code>radio</code> ラジオボタンを表示します。選択肢を提示するのに有用です。例えば、Botの強さを設定させるなどです。</p><h5 id="プロパティ-1" tabindex="-1"><a class="header-anchor" href="#プロパティ-1" aria-hidden="true">#</a> プロパティ</h5><p><code>items</code> ... ラジオボタンの選択肢。例:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  label<span class="token operator">:</span> <span class="token string">&#39;弱&#39;</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  label<span class="token operator">:</span> <span class="token string">&#39;中&#39;</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  label<span class="token operator">:</span> <span class="token string">&#39;強&#39;</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">3</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="スライダー" tabindex="-1"><a class="header-anchor" href="#スライダー" aria-hidden="true">#</a> スライダー</h4><p>type: <code>slider</code> スライダーを表示します。</p><h5 id="プロパティ-2" tabindex="-1"><a class="header-anchor" href="#プロパティ-2" aria-hidden="true">#</a> プロパティ</h5><p><code>min</code> ... スライダーの下限。 <code>max</code> ... スライダーの上限。 <code>step</code> ... 入力欄で刻むステップ値。</p><h4 id="テキストボックス" tabindex="-1"><a class="header-anchor" href="#テキストボックス" aria-hidden="true">#</a> テキストボックス</h4><p>type: <code>textbox</code> テキストボックスを表示します。ユーザーになにか入力させる一般的な用途に利用できます。</p><h2 id="ユーザーにメッセージを表示する" tabindex="-1"><a class="header-anchor" href="#ユーザーにメッセージを表示する" aria-hidden="true">#</a> ユーザーにメッセージを表示する</h2><p>設定画面でユーザーと対話する、フォーム以外のもうひとつの方法がこれです。ユーザーになにかメッセージを表示することができます。 例えば、ユーザーがBotの対応していないモードやマップを選択したとき、警告を表示するなどです。 メッセージを表示するには、次のメッセージをストリームに送信します:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    text<span class="token operator">:</span> <span class="token string">&#39;メッセージ内容&#39;</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;メッセージの種類&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>メッセージの種類: <code>success</code>, <code>info</code>, <code>warning</code>, <code>error</code>。</p><h2 id="投了する" tabindex="-1"><a class="header-anchor" href="#投了する" aria-hidden="true">#</a> 投了する</h2><p>投了をするには、<a href="./api/endpoints/games/reversi/games/surrender">このエンドポイント</a>にリクエストします。</p>',51),p={},l=(0,n(3744).Z)(p,[["render",function(a,s){return e}]])},3744:(a,s)=>{s.Z=(a,s)=>{for(const[n,e]of s)a[n]=e;return a}},2192:(a,s,n)=>{n.r(s),n.d(s,{data:()=>e});const e={key:"v-32e8b72b",path:"/docs/advanced/reversi-bot.html",title:"MisskeyリバーシBotの開発",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"位置の計算法",slug:"位置の計算法",children:[{level:3,title:"X,Y座標 から インデックス に変換する",slug:"x-y座標-から-インデックス-に変換する",children:[]},{level:3,title:"インデックス から X,Y座標 に変換する",slug:"インデックス-から-x-y座標-に変換する",children:[]}]},{level:2,title:"マップ情報",slug:"マップ情報",children:[]},{level:2,title:"ユーザーにフォームを提示して対話可能Botを作成する",slug:"ユーザーにフォームを提示して対話可能botを作成する",children:[{level:3,title:"フォームの操作を受け取る",slug:"フォームの操作を受け取る",children:[]},{level:3,title:"フォームコントロールの種類",slug:"フォームコントロールの種類",children:[]}]},{level:2,title:"ユーザーにメッセージを表示する",slug:"ユーザーにメッセージを表示する",children:[]},{level:2,title:"投了する",slug:"投了する",children:[]}],filePathRelative:"docs/advanced/reversi-bot.md",git:{updatedTime:1631291596e3,contributors:[{name:"syuilo",email:"Syuilotan@yahoo.co.jp",commits:1}]}}}}]);