"use strict";(self.webpackChunkmisskey_hub=self.webpackChunkmisskey_hub||[]).push([[5587],{8687:(e,t,a)=>{a.r(t),a.d(t,{default:()=>l});var s=a(6252);const i=(0,s.uE)('<h1 id="misskey-api" tabindex="-1"><a class="header-anchor" href="#misskey-api" aria-hidden="true">#</a> Misskey API</h1><p>MisskeyはAPIを公開しています。APIを使ってMisskeyクライアント、Misskey連携Webサービス、Bot等(以下「アプリケーション」と呼びます)を開発することができます。 ストリーミングAPIもあるので、リアルタイム性のあるアプリケーションを作ることも可能です。</p><div class="custom-container tip"><i class="fas fa-info"></i><p>Misskey公式SDKやサードパーティライブラリを使うことによって、このドキュメントで説明するいくつかの手順を簡略化できるなど、より便利にAPIを利用することができます。<br> ライブラリについては<a href="TODO">こちら</a>を参照してください。</p></div><p>APIを使い始めるには、APIを利用するアカウントに紐づいた<strong>アクセストークン</strong>を取得する必要があります。 このドキュメントでは、アクセストークンを取得する手順を説明した後、基本的なAPIの使い方を説明します。</p><h2 id="アクセストークンの取得" tabindex="-1"><a class="header-anchor" href="#アクセストークンの取得" aria-hidden="true">#</a> アクセストークンの取得</h2><p>基本的に、APIはリクエストにはアクセストークンが必要となります。 アクセストークンは、ユーザーに紐づいた認証情報で、APIを利用するユーザーを識別するとともに、アクセストークンごとにどういった操作の権限を持っているかが管理されます。</p><div class="custom-container tip"><i class="fas fa-info"></i><p>ユーザーとそのユーザーに紐づいたアクセストークンは一対多の関係であり、あるユーザーに対して複数のアクセストークンが発行され得ます。</p></div><p>あなた自分自身のアクセストークンは簡単に取得できるほか、あなたのアプリケーションを使用することになる不特定のユーザーのアクセストークンを取得することもできます。</p><ul><li>前者の場合: <strong>「自分自身のアクセストークンを手動発行する」</strong> に進む</li><li>後者の場合: <strong>「アプリケーション利用者にアクセストークンの発行をリクエストする」</strong> に進む</li></ul><h3 id="自分自身のアクセストークンを手動発行する" tabindex="-1"><a class="header-anchor" href="#自分自身のアクセストークンを手動発行する" aria-hidden="true">#</a> 自分自身のアクセストークンを手動発行する</h3><p>Misskey Webの「設定 &gt; API」で、自分のアクセストークンを発行できます。</p><div class="custom-container danger"><i class="fas fa-times"></i><p>アクセストークンは他人に知られないようにしてください。</p></div><h3 id="アプリケーション利用者にアクセストークンの発行をリクエストする" tabindex="-1"><a class="header-anchor" href="#アプリケーション利用者にアクセストークンの発行をリクエストする" aria-hidden="true">#</a> アプリケーション利用者にアクセストークンの発行をリクエストする</h3><p>アプリケーションを利用するユーザー(以下単に「ユーザー」と呼びます)のアクセストークンを取得するには、以下の手順で発行をリクエストします。</p><h4 id="step-1" tabindex="-1"><a class="header-anchor" href="#step-1" aria-hidden="true">#</a> Step 1</h4><p>UUIDを生成する。以後これを<strong>セッションID</strong>と呼びます。</p><div class="custom-container danger"><i class="fas fa-times"></i><p>このセッションIDは毎回生成し、使いまわさないようにしてください。</p></div><h4 id="step-2" tabindex="-1"><a class="header-anchor" href="#step-2" aria-hidden="true">#</a> Step 2</h4><p>アプリケーション認証フォームをユーザーのブラウザで表示させる。認証フォームは、以下の形式のURLで開くことができます:</p><div class="language-text ext-text"><pre class="language-text"><code>https://{host}/miauth/{session}\n</code></pre></div><p>ここで、</p><ul><li><code>{host}</code>の部分は、ユーザーのインスタンスのホストに置き換えます。通常ホストはユーザーが入力します。</li><li><code>{session}</code>の部分は、セッションIDに置き換えます。</li></ul><p>また、URLにクエリパラメータとしていくつかのオプションを設定できます:</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>name</code></td><td>アプリケーション名。</td></tr><tr><td><code>icon</code></td><td>アプリケーションのアイコン画像URL。</td></tr><tr><td><code>callback</code></td><td>認証が終わった後にリダイレクトするURL。<br>リダイレクト時には、<code>session</code>というクエリパラメータでセッションIDが付きます。</td></tr><tr><td><code>permission</code></td><td>アプリケーションが要求する権限。<br>要求する権限を<code>,</code>で区切って列挙します。権限の一覧は<a href="TODO">こちら</a>で確認できます。</td></tr></tbody></table><div class="custom-container tip"><i class="fas fa-info"></i><p class="custom-container-title">例</p><div class="language-text ext-text"><pre class="language-text"><code>https://misskey.io/miauth/c1f6d42b-468b-4fd2-8274-e58abdedef6f?name=MyApp&amp;callback=https%3A%2F%2Fmyapp.example.com%2Fcallback&amp;permisson=write:notes,write:following,read:drive\n</code></pre></div></div><h4 id="step-3" tabindex="-1"><a class="header-anchor" href="#step-3" aria-hidden="true">#</a> Step 3</h4><p>ユーザーがアプリケーションアクセスを許可した後、次の形式のURLにPOSTリクエストすると、レスポンスとしてアクセストークンを含むJSONが返ります。</p><div class="language-text ext-text"><pre class="language-text"><code>https://{host}/api/miauth/{session}/check\n</code></pre></div><p>ここで、</p><ul><li><code>{host}</code>の部分は、ユーザーのインスタンスのホストに置き換えます。</li><li><code>{session}</code>の部分は、セッションIDに置き換えます。</li></ul><p>レスポンスに含まれるプロパティは以下の通りです:</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td><code>token</code></td><td>ユーザーのアクセストークン。</td></tr><tr><td><code>user</code></td><td>ユーザーの情報。</td></tr></tbody></table><h2 id="apiの利用" tabindex="-1"><a class="header-anchor" href="#apiの利用" aria-hidden="true">#</a> APIの利用</h2><p>アクセストークンが取得できたら、各種エンドポイントにリクエストすることでAPIの利用が行えます。 <strong>HTTP APIはすべてPOSTで、リクエスト/レスポンスともにJSON形式です。</strong></p><div class="custom-container warning"><i class="fas fa-exclamation"></i><p>MisskeyはRESTを採用していません。</p></div><p>アクセストークンは、<code>i</code>というパラメータ名でリクエストボディJSONに含めます。</p><p>APIの詳細は、<a href="TODO">APIリファレンス</a>を参照してください。</p>',37),d=(0,s.Uk)("また、MisskeyはHTTP APIだけでなく、ストリーミングAPIも提供しています。ストリーミングAPIの詳細は"),r=(0,s.Uk)("こちらのドキュメント"),c=(0,s.Uk)("を参照してください。"),o={},l=(0,a(3744).Z)(o,[["render",function(e,t){const a=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[i,(0,s._)("p",null,[d,(0,s.Wm)(a,{to:"/docs/streaming-api.html"},{default:(0,s.w5)((()=>[r])),_:1}),c])],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[a,s]of t)e[a]=s;return e}},1301:(e,t,a)=>{a.r(t),a.d(t,{data:()=>s});const s={key:"v-d2e3fc0c",path:"/docs/api.html",title:"Misskey API",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"アクセストークンの取得",slug:"アクセストークンの取得",children:[{level:3,title:"自分自身のアクセストークンを手動発行する",slug:"自分自身のアクセストークンを手動発行する",children:[]},{level:3,title:"アプリケーション利用者にアクセストークンの発行をリクエストする",slug:"アプリケーション利用者にアクセストークンの発行をリクエストする",children:[]}]},{level:2,title:"APIの利用",slug:"apiの利用",children:[]}],filePathRelative:"docs/api.md",git:{updatedTime:1635678447e3,contributors:[{name:"syuilo",email:"Syuilotan@yahoo.co.jp",commits:3}]},relatedPages:[{title:"ストリーミングAPI",path:"/docs/streaming-api.html",summary:""}]}}}]);