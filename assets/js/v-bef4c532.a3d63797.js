"use strict";(self.webpackChunkmisskey_hub=self.webpackChunkmisskey_hub||[]).push([[288],{2766:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="ストリーミングapi" tabindex="-1"><a class="header-anchor" href="#ストリーミングapi" aria-hidden="true">#</a> ストリーミングAPI</h1><p>ストリーミングAPIを使うと、リアルタイムで様々な情報(例えばタイムラインに新しい投稿が流れてきた、メッセージが届いた、フォローされた、など)を受け取ったり、様々な操作を行ったりすることができます。</p><h2 id="ストリームに接続する" tabindex="-1"><a class="header-anchor" href="#ストリームに接続する" aria-hidden="true">#</a> ストリームに接続する</h2><p>ストリーミングAPIを利用するには、まずMisskeyサーバーに<strong>websocket</strong>接続する必要があります。</p><p>以下のURLに、<code>i</code>というパラメータ名で認証情報を含めて、websocket接続してください。例:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>%WS_URL%/streaming?i=xxxxxxxxxxxxxxx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>認証情報は、自分のAPIキーや、アプリケーションからストリームに接続する際はユーザーのアクセストークンのことを指します。</p><div class="info">ℹ️ 認証情報の取得については、<a href="./api">こちらのドキュメント</a>をご確認ください。</div><hr><p>認証情報は省略することもできますが、その場合非ログインでの利用ということになり、受信できる情報や可能な操作は限られます。例:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>%WS_URL%/streaming\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p>ストリームに接続すると、後述するAPI操作や、投稿の購読を行ったりすることができます。 しかしまだこの段階では、例えばタイムラインへの新しい投稿を受信したりすることはできません。 それを行うには、ストリーム上で、後述する<strong>チャンネル</strong>に接続する必要があります。</p><p><strong>ストリームでのやり取りはすべてJSONです。</strong></p><h2 id="チャンネル" tabindex="-1"><a class="header-anchor" href="#チャンネル" aria-hidden="true">#</a> チャンネル</h2><p>MisskeyのストリーミングAPIにはチャンネルという概念があります。これは、送受信する情報を分離するための仕組みです。 Misskeyのストリームに接続しただけでは、まだリアルタイムでタイムラインの投稿を受信したりはできません。 ストリーム上でチャンネルに接続することで、様々な情報を受け取ったり情報を送信したりすることができるようになります。</p><p>ひとつのストリーム上で、同時に複数のチャンネルに接続することができます。</p><h3 id="チャンネルに接続する" tabindex="-1"><a class="header-anchor" href="#チャンネルに接続する" aria-hidden="true">#</a> チャンネルに接続する</h3><p>チャンネルに接続するには、次のようなデータをJSONでストリームに送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;connect&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tchannel<span class="token operator">:</span> &#39;xxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\tid<span class="token operator">:</span> &#39;foobar&#39;<span class="token punctuation">,</span>\n\t\tparams<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t...\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>ここで、</p><ul><li><code>channel</code>には接続したいチャンネル名を設定します。チャンネルの種類については後述します。</li><li><code>id</code>にはそのチャンネルとやり取りするための任意のIDを設定します。ストリームでは様々なメッセージが流れるので、そのメッセージがどのチャンネルからのものなのか識別する必要があるからです。このIDは、UUIDや、乱数のようなもので構いません。</li><li><code>params</code>はチャンネルに接続する際のパラメータです。チャンネルによって接続時に必要とされるパラメータは異なります。パラメータ不要のチャンネルに接続する際は、このプロパティは省略可能です。</li></ul><div class="info">ℹ️ IDはチャンネルごとではなく「チャンネルの接続ごと」です。なぜなら、同じチャンネルに異なるパラメータで複数接続するケースもあるからです。</div><h3 id="チャンネルからのメッセージを受け取る" tabindex="-1"><a class="header-anchor" href="#チャンネルからのメッセージを受け取る" aria-hidden="true">#</a> チャンネルからのメッセージを受け取る</h3><p>例えばタイムラインのチャンネルなら、新しい投稿があった時にメッセージを発します。そのメッセージを受け取ることで、タイムラインに新しい投稿がされたことをリアルタイムで知ることができます。</p><p>チャンネルがメッセージを発すると、次のようなデータがJSONでストリームに流れてきます:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;channel&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;foobar&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;something&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\tsome<span class="token operator">:</span> &#39;thing&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>ここで、</p><ul><li><code>id</code>には前述したそのチャンネルに接続する際に設定したIDが設定されています。これで、このメッセージがどのチャンネルからのものなのか知ることができます。</li><li><code>type</code>にはメッセージの種類が設定されます。チャンネルによって、どのような種類のメッセージが流れてくるかは異なります。</li><li><code>body</code>にはメッセージの内容が設定されます。チャンネルによって、どのような内容のメッセージが流れてくるかは異なります。</li></ul><h3 id="チャンネルに向けてメッセージを送信する" tabindex="-1"><a class="header-anchor" href="#チャンネルに向けてメッセージを送信する" aria-hidden="true">#</a> チャンネルに向けてメッセージを送信する</h3><p>チャンネルによっては、メッセージを受け取るだけでなく、こちらから何かメッセージを送信し、何らかの操作を行える場合があります。</p><p>チャンネルにメッセージを送信するには、次のようなデータをJSONでストリームに送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;channel&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;foobar&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;something&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\tsome<span class="token operator">:</span> &#39;thing&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>ここで、</p><ul><li><code>id</code>には前述したそのチャンネルに接続する際に設定したIDを設定します。これで、このメッセージがどのチャンネルに向けたものなのか識別させることができます。</li><li><code>type</code>にはメッセージの種類を設定します。チャンネルによって、どのような種類のメッセージを受け付けるかは異なります。</li><li><code>body</code>にはメッセージの内容を設定します。チャンネルによって、どのような内容のメッセージを受け付けるかは異なります。</li></ul><h3 id="チャンネルから切断する" tabindex="-1"><a class="header-anchor" href="#チャンネルから切断する" aria-hidden="true">#</a> チャンネルから切断する</h3><p>チャンネルから切断するには、次のようなデータをJSONでストリームに送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;disconnect&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;foobar&#39;\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ここで、</p><ul><li><code>id</code>には前述したそのチャンネルに接続する際に設定したIDを設定します。</li></ul><h2 id="ストリームを経由してapiリクエストする" tabindex="-1"><a class="header-anchor" href="#ストリームを経由してapiリクエストする" aria-hidden="true">#</a> ストリームを経由してAPIリクエストする</h2><p>ストリームを経由してAPIリクエストすると、HTTPリクエストを発生させずにAPIを利用できます。そのため、コードを簡潔にできたり、パフォーマンスの向上を見込めるかもしれません。</p><p>ストリームを経由してAPIリクエストするには、次のようなデータをJSONでストリームに送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;api&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\tendpoint<span class="token operator">:</span> &#39;notes/create&#39;<span class="token punctuation">,</span>\n\t\tdata<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\ttext<span class="token operator">:</span> &#39;yee haw!&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>ここで、</p><ul><li><code>id</code>には、APIのレスポンスを識別するための、APIリクエストごとの一意なIDを設定する必要があります。UUIDや、簡単な乱数のようなもので構いません。</li><li><code>endpoint</code>には、あなたがリクエストしたいAPIのエンドポイントを指定します。</li><li><code>data</code>には、エンドポイントのパラメータを含めます。</li></ul><div class="info">ℹ️ APIのエンドポイントやパラメータについてはAPIリファレンスをご確認ください。</div><h3 id="レスポンスの受信" tabindex="-1"><a class="header-anchor" href="#レスポンスの受信" aria-hidden="true">#</a> レスポンスの受信</h3><p>APIへリクエストすると、レスポンスがストリームから次のような形式で流れてきます。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;api<span class="token operator">:</span>xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t...\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ここで、</p><ul><li><code>xxxxxxxxxxxxxxxx</code>の部分には、リクエストの際に設定された<code>id</code>が含まれています。これにより、どのリクエストに対するレスポンスなのか判別することができます。</li><li><code>body</code>には、レスポンスが含まれています。</li></ul><h2 id="投稿のキャプチャ" tabindex="-1"><a class="header-anchor" href="#投稿のキャプチャ" aria-hidden="true">#</a> 投稿のキャプチャ</h2><p>Misskeyは投稿のキャプチャと呼ばれる仕組みを提供しています。これは、指定した投稿のイベントをストリームで受け取る機能です。</p><p>例えばタイムラインを取得してユーザーに表示したとします。ここで誰かがそのタイムラインに含まれるどれかの投稿に対してリアクションしたとします。</p><p>しかし、クライアントからするとある投稿にリアクションが付いたことなどは知る由がないため、リアルタイムでリアクションをタイムライン上の投稿に反映して表示するといったことができません。</p><p>この問題を解決するために、Misskeyは投稿のキャプチャ機構を用意しています。投稿をキャプチャすると、その投稿に関するイベントを受け取ることができるため、リアルタイムでリアクションを反映させたりすることが可能になります。</p><h3 id="投稿をキャプチャする" tabindex="-1"><a class="header-anchor" href="#投稿をキャプチャする" aria-hidden="true">#</a> 投稿をキャプチャする</h3><p>投稿をキャプチャするには、ストリームに次のようなメッセージを送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;subNote&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ここで、</p><ul><li><code>id</code>にキャプチャしたい投稿の<code>id</code>を設定します。</li></ul><p>このメッセージを送信すると、Misskeyにキャプチャを要請したことになり、以後、その投稿に関するイベントが流れてくるようになります。</p><p>例えば投稿にリアクションが付いたとすると、次のようなメッセージが流れてきます:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;noteUpdated&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;reacted&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\treaction<span class="token operator">:</span> &#39;like&#39;<span class="token punctuation">,</span>\n\t\t\tuserId<span class="token operator">:</span> &#39;yyyyyyyyyyyyyyyy&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>ここで、</p><ul><li><code>body</code>内の<code>id</code>に、イベントを発生させた投稿のIDが設定されます。</li><li><code>body</code>内の<code>type</code>に、イベントの種類が設定されます。</li><li><code>body</code>内の<code>body</code>に、イベントの詳細が設定されます。</li></ul><h4 id="イベントの種類" tabindex="-1"><a class="header-anchor" href="#イベントの種類" aria-hidden="true">#</a> イベントの種類</h4><h5 id="reacted" tabindex="-1"><a class="header-anchor" href="#reacted" aria-hidden="true">#</a> <code>reacted</code></h5><p>その投稿にリアクションがされた時に発生します。</p><ul><li><code>reaction</code>に、リアクションの種類が設定されます。</li><li><code>userId</code>に、リアクションを行ったユーザーのIDが設定されます。</li></ul><p>例:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;noteUpdated&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;reacted&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\treaction<span class="token operator">:</span> &#39;like&#39;<span class="token punctuation">,</span>\n\t\t\tuserId<span class="token operator">:</span> &#39;yyyyyyyyyyyyyyyy&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="deleted" tabindex="-1"><a class="header-anchor" href="#deleted" aria-hidden="true">#</a> <code>deleted</code></h5><p>その投稿が削除された時に発生します。</p><ul><li><code>deletedAt</code>に、削除日時が設定されます。</li></ul><p>例:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;noteUpdated&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;deleted&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\tdeletedAt<span class="token operator">:</span> &#39;<span class="token number">2018</span><span class="token number">-10</span>-22T02<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">09</span>.703Z&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="pollvoted" tabindex="-1"><a class="header-anchor" href="#pollvoted" aria-hidden="true">#</a> <code>pollVoted</code></h5><p>その投稿に添付されたアンケートに投票された時に発生します。</p><ul><li><code>choice</code>に、選択肢IDが設定されます。</li><li><code>userId</code>に、投票を行ったユーザーのIDが設定されます。</li></ul><p>例:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;noteUpdated&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;<span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> &#39;pollVoted&#39;<span class="token punctuation">,</span>\n\t\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\tchoice<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\t\t\tuserId<span class="token operator">:</span> &#39;yyyyyyyyyyyyyyyy&#39;\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="投稿のキャプチャを解除する" tabindex="-1"><a class="header-anchor" href="#投稿のキャプチャを解除する" aria-hidden="true">#</a> 投稿のキャプチャを解除する</h3><p>その投稿がもう画面に表示されなくなったりして、その投稿に関するイベントをもう受け取る必要がなくなったときは、キャプチャの解除を申請してください。</p><p>次のメッセージを送信します:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span> &#39;unsubNote&#39;<span class="token punctuation">,</span>\n\tbody<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> &#39;xxxxxxxxxxxxxxxx&#39;\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ここで、</p><ul><li><code>id</code>にキャプチャを解除したい投稿の<code>id</code>を設定します。</li></ul><p>このメッセージを送信すると、以後、その投稿に関するイベントは流れてこないようになります。</p><h1 id="チャンネル一覧" tabindex="-1"><a class="header-anchor" href="#チャンネル一覧" aria-hidden="true">#</a> チャンネル一覧</h1><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> <code>main</code></h2><p>アカウントに関する基本的な情報が流れてきます。このチャンネルにパラメータはありません。</p><h3 id="流れてくるイベント一覧" tabindex="-1"><a class="header-anchor" href="#流れてくるイベント一覧" aria-hidden="true">#</a> 流れてくるイベント一覧</h3><h4 id="renote" tabindex="-1"><a class="header-anchor" href="#renote" aria-hidden="true">#</a> <code>renote</code></h4><p>自分の投稿がRenoteされた時に発生するイベントです。自分自身の投稿をRenoteしたときは発生しません。</p><h4 id="mention" tabindex="-1"><a class="header-anchor" href="#mention" aria-hidden="true">#</a> <code>mention</code></h4><p>誰かからメンションされたときに発生するイベントです。</p><h4 id="readallnotifications" tabindex="-1"><a class="header-anchor" href="#readallnotifications" aria-hidden="true">#</a> <code>readAllNotifications</code></h4><p>自分宛ての通知がすべて既読になったことを表すイベントです。このイベントを利用して、「通知があることを示すアイコン」のようなものをオフにしたりする等のケースが想定されます。</p><h4 id="meupdated" tabindex="-1"><a class="header-anchor" href="#meupdated" aria-hidden="true">#</a> <code>meUpdated</code></h4><p>自分の情報が更新されたことを表すイベントです。</p><h4 id="follow" tabindex="-1"><a class="header-anchor" href="#follow" aria-hidden="true">#</a> <code>follow</code></h4><p>自分が誰かをフォローしたときに発生するイベントです。</p><h4 id="unfollow" tabindex="-1"><a class="header-anchor" href="#unfollow" aria-hidden="true">#</a> <code>unfollow</code></h4><p>自分が誰かのフォローを解除したときに発生するイベントです。</p><h4 id="followed" tabindex="-1"><a class="header-anchor" href="#followed" aria-hidden="true">#</a> <code>followed</code></h4><p>自分が誰かにフォローされたときに発生するイベントです。</p><h2 id="hometimeline" tabindex="-1"><a class="header-anchor" href="#hometimeline" aria-hidden="true">#</a> <code>homeTimeline</code></h2><p>ホームタイムラインの投稿情報が流れてきます。このチャンネルにパラメータはありません。</p><h3 id="流れてくるイベント一覧-1" tabindex="-1"><a class="header-anchor" href="#流れてくるイベント一覧-1" aria-hidden="true">#</a> 流れてくるイベント一覧</h3><h4 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> <code>note</code></h4><p>タイムラインに新しい投稿が流れてきたときに発生するイベントです。</p><h2 id="localtimeline" tabindex="-1"><a class="header-anchor" href="#localtimeline" aria-hidden="true">#</a> <code>localTimeline</code></h2><p>ローカルタイムラインの投稿情報が流れてきます。このチャンネルにパラメータはありません。</p><h3 id="流れてくるイベント一覧-2" tabindex="-1"><a class="header-anchor" href="#流れてくるイベント一覧-2" aria-hidden="true">#</a> 流れてくるイベント一覧</h3><h4 id="note-1" tabindex="-1"><a class="header-anchor" href="#note-1" aria-hidden="true">#</a> <code>note</code></h4><p>ローカルタイムラインに新しい投稿が流れてきたときに発生するイベントです。</p><h2 id="hybridtimeline" tabindex="-1"><a class="header-anchor" href="#hybridtimeline" aria-hidden="true">#</a> <code>hybridTimeline</code></h2><p>ソーシャルタイムラインの投稿情報が流れてきます。このチャンネルにパラメータはありません。</p><h3 id="流れてくるイベント一覧-3" tabindex="-1"><a class="header-anchor" href="#流れてくるイベント一覧-3" aria-hidden="true">#</a> 流れてくるイベント一覧</h3><h4 id="note-2" tabindex="-1"><a class="header-anchor" href="#note-2" aria-hidden="true">#</a> <code>note</code></h4><p>ソーシャルタイムラインに新しい投稿が流れてきたときに発生するイベントです。</p><h2 id="globaltimeline" tabindex="-1"><a class="header-anchor" href="#globaltimeline" aria-hidden="true">#</a> <code>globalTimeline</code></h2><p>グローバルタイムラインの投稿情報が流れてきます。このチャンネルにパラメータはありません。</p><h3 id="流れてくるイベント一覧-4" tabindex="-1"><a class="header-anchor" href="#流れてくるイベント一覧-4" aria-hidden="true">#</a> 流れてくるイベント一覧</h3><h4 id="note-3" tabindex="-1"><a class="header-anchor" href="#note-3" aria-hidden="true">#</a> <code>note</code></h4><p>グローバルタイムラインに新しい投稿が流れてきたときに発生するイベントです。</p>',128),p={render:function(n,a){return e}}},1964:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-bef4c532",path:"/docs/advanced/stream.html",title:"ストリーミングAPI",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"ストリームに接続する",slug:"ストリームに接続する",children:[]},{level:2,title:"チャンネル",slug:"チャンネル",children:[{level:3,title:"チャンネルに接続する",slug:"チャンネルに接続する",children:[]},{level:3,title:"チャンネルからのメッセージを受け取る",slug:"チャンネルからのメッセージを受け取る",children:[]},{level:3,title:"チャンネルに向けてメッセージを送信する",slug:"チャンネルに向けてメッセージを送信する",children:[]},{level:3,title:"チャンネルから切断する",slug:"チャンネルから切断する",children:[]}]},{level:2,title:"ストリームを経由してAPIリクエストする",slug:"ストリームを経由してapiリクエストする",children:[{level:3,title:"レスポンスの受信",slug:"レスポンスの受信",children:[]}]},{level:2,title:"投稿のキャプチャ",slug:"投稿のキャプチャ",children:[{level:3,title:"投稿をキャプチャする",slug:"投稿をキャプチャする",children:[]},{level:3,title:"投稿のキャプチャを解除する",slug:"投稿のキャプチャを解除する",children:[]}]},{level:2,title:"main",slug:"main",children:[{level:3,title:"流れてくるイベント一覧",slug:"流れてくるイベント一覧",children:[]}]},{level:2,title:"homeTimeline",slug:"hometimeline",children:[{level:3,title:"流れてくるイベント一覧",slug:"流れてくるイベント一覧-1",children:[]}]},{level:2,title:"localTimeline",slug:"localtimeline",children:[{level:3,title:"流れてくるイベント一覧",slug:"流れてくるイベント一覧-2",children:[]}]},{level:2,title:"hybridTimeline",slug:"hybridtimeline",children:[{level:3,title:"流れてくるイベント一覧",slug:"流れてくるイベント一覧-3",children:[]}]},{level:2,title:"globalTimeline",slug:"globaltimeline",children:[{level:3,title:"流れてくるイベント一覧",slug:"流れてくるイベント一覧-4",children:[]}]}],filePathRelative:"docs/advanced/stream.md",git:{updatedTime:1631291596e3,contributors:[{name:"syuilo",email:"Syuilotan@yahoo.co.jp",commits:1}]}}}}]);