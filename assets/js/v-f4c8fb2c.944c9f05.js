"use strict";(self.webpackChunkmisskey_hub=self.webpackChunkmisskey_hub||[]).push([[3742],{4355:(s,e,n)=>{n.r(e),n.d(e,{default:()=>m});var a=n(6252);const i=(0,a.uE)('<h1 id="dockerを使ったmisskey構築" tabindex="-1"><a class="header-anchor" href="#dockerを使ったmisskey構築" aria-hidden="true">#</a> Dockerを使ったMisskey構築</h1><p>このガイドはDockerを使ったMisskeyセットアップ方法を説明します。</p><div class="custom-container tip"><i class="fas fa-info"></i><p class="custom-container-title">前提条件</p><ul><li>dockerおよびdocker-composeがインストールされていること。</li></ul></div><h2 id="リポジトリの取得" tabindex="-1"><a class="header-anchor" href="#リポジトリの取得" aria-hidden="true">#</a> リポジトリの取得</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone -b master git://github.com/misskey-dev/misskey.git\n<span class="token builtin class-name">cd</span> misskey\n<span class="token function">git</span> checkout master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="設定" tabindex="-1"><a class="header-anchor" href="#設定" aria-hidden="true">#</a> 設定</h2><p>下記コマンドで、各種設定ファイルのサンプルをコピーします。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> .config/example.yml .config/default.yml\n<span class="token function">cp</span> .config/docker_example.env .config/docker.env\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>default.yml</code>と<code>docker.env</code>をファイル内の説明に従って編集してください。</p><div class="custom-container warning"><i class="fas fa-exclamation"></i><p><code>default.yml</code>の、Postgresql/Redisのホストはそれぞれ<code>db</code>/<code>redis</code>にしてください。</p></div><p>必要に応じて、<code>docker-compose.yml</code>を編集します。(ポートを変更したい場合など)</p><h2 id="ビルドと初期化" tabindex="-1"><a class="header-anchor" href="#ビルドと初期化" aria-hidden="true">#</a> ビルドと初期化</h2><p>次のコマンドでMisskeyのビルドとデータベースの初期化を行います。 これにはしばらく時間がかかります。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> docker-compose build\n<span class="token function">sudo</span> docker-compose run --rm web <span class="token function">yarn</span> run init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="起動" tabindex="-1"><a class="header-anchor" href="#起動" aria-hidden="true">#</a> 起動</h2><p>お疲れ様でした。以下のコマンドでMisskeyを起動できます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> docker-compose up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>GLHF✨</p><h2 id="misskeyのアップデート方法" tabindex="-1"><a class="header-anchor" href="#misskeyのアップデート方法" aria-hidden="true">#</a> Misskeyのアップデート方法</h2>',19),c={class:"custom-container warning"},l=(0,a._)("i",{class:"fas fa-exclamation"},null,-1),o=(0,a.Uk)("アップデートの際は必ず"),r={href:"https://github.com/misskey-dev/misskey/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("リリースノート"),t=(0,a.Uk)("を確認し、変更点や追加で必要になる作業の有無(ほとんどの場合ありません)を予め把握するようにしてください。"),p=(0,a.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> stash\n<span class="token function">git</span> checkout master\n<span class="token function">git</span> pull\n<span class="token function">git</span> submodule update --init\n<span class="token function">git</span> stash pop\n<span class="token function">sudo</span> docker-compose build\n<span class="token function">sudo</span> docker-compose stop <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> docker-compose up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>アップデート内容、およびデータベースの規模によっては時間がかかることがあります。</p><h2 id="cliコマンドを実行する方法" tabindex="-1"><a class="header-anchor" href="#cliコマンドを実行する方法" aria-hidden="true">#</a> cliコマンドを実行する方法</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> docker-compose run --rm web node packages/backend/built/tools/foo bar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),u={},m=(0,n(3744).Z)(u,[["render",function(s,e){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[i,(0,a._)("div",c,[l,(0,a._)("p",null,[o,(0,a._)("a",r,[d,(0,a.Wm)(n)]),t])]),p],64)}]])},3744:(s,e)=>{e.Z=(s,e)=>{for(const[n,a]of e)s[n]=a;return s}},755:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-f4c8fb2c",path:"/docs/install/docker.html",title:"Dockerを使ったMisskey構築",lang:"ja-JP",frontmatter:{description:"このガイドはDockerを使ったMisskeyセットアップ方法を説明します。"},excerpt:"",headers:[{level:2,title:"リポジトリの取得",slug:"リポジトリの取得",children:[]},{level:2,title:"設定",slug:"設定",children:[]},{level:2,title:"ビルドと初期化",slug:"ビルドと初期化",children:[]},{level:2,title:"起動",slug:"起動",children:[]},{level:2,title:"Misskeyのアップデート方法",slug:"misskeyのアップデート方法",children:[]},{level:2,title:"cliコマンドを実行する方法",slug:"cliコマンドを実行する方法",children:[]}],filePathRelative:"docs/install/docker.md",git:{updatedTime:1640352201e3,contributors:[{name:"syuilo",email:"Syuilotan@yahoo.co.jp",commits:9}]},relatedPages:[{title:"Misskeyインスタンスの作成",path:"/docs/install.html",summary:"Misskeyインスタンスの作成方法についての案内です。"}]}}}]);