"use strict";(self.webpackChunkmisskey_hub=self.webpackChunkmisskey_hub||[]).push([[1539],{5180:(e,s,a)=>{a.r(s),a.d(s,{default:()=>k});var n=a(6252);const i=(0,n.uE)('<h1 id="misskey-install-shell-script-v1-4-0" tabindex="-1"><a class="header-anchor" href="#misskey-install-shell-script-v1-4-0" aria-hidden="true">#</a> Misskey install shell script v1.4.0</h1><p>Install Misskey with one shell script!</p><p>You can install misskey on an Ubuntu server just by answering some questions.</p><p>There is also an update script.</p><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> License</h2><p><a href="./LICENSE">MIT License</a></p><h2 id="ingredients" tabindex="-1"><a class="header-anchor" href="#ingredients" aria-hidden="true">#</a> Ingredients</h2><ol><li>A Domain</li><li>An Ubuntu Server</li><li>A Cloudflare Account (recommended)</li></ol><h2 id="configure-cloudflare" tabindex="-1"><a class="header-anchor" href="#configure-cloudflare" aria-hidden="true">#</a> Configure Cloudflare</h2><p>If you are using nginx and Cloudflare, you must configure Cloudflare:</p><ul><li>Set DNS.</li><li>On SSL/TLS setting tab, switch the encryption mode to &quot;Full&quot;.</li></ul><h2 id="procedures" tabindex="-1"><a class="header-anchor" href="#procedures" aria-hidden="true">#</a> Procedures</h2><h3 id="_1-ssh" tabindex="-1"><a class="header-anchor" href="#_1-ssh" aria-hidden="true">#</a> 1. SSH</h3><p>Connect to the server via SSH.<br> (If you have the server&#39;s desktop open, open the shell.)</p><h3 id="_2-clean-up" tabindex="-1"><a class="header-anchor" href="#_2-clean-up" aria-hidden="true">#</a> 2. Clean up</h3><p>Make sure all packages are up to date and reboot.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo apt update; sudo apt full-upgrade -y; sudo reboot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-start-the-installation" tabindex="-1"><a class="header-anchor" href="#_3-start-the-installation" aria-hidden="true">#</a> 3. Start the installation</h3><p>Reconnect SSH and let&#39;s start installing Misskey.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>wget https://raw.githubusercontent.com/joinmisskey/bash-install/main/ubuntu.sh -O ubuntu.sh; sudo bash ubuntu.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_4-to-update" tabindex="-1"><a class="header-anchor" href="#_4-to-update" aria-hidden="true">#</a> 4. To update</h3><p>There is also an update script.</p><p>First, download the script.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>wget https://raw.githubusercontent.com/joinmisskey/bash-install/main/update.ubuntu.sh -O update.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Run it when you want to update Misskey.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo bash update.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>In the systemd environment, the <code>-r</code> option can be used to update and reboot the system.</li><li>In the docker environment, you can specify repository:tag as an argument.</li></ul><h2 id="environments-in-which-the-operation-was-tested" tabindex="-1"><a class="header-anchor" href="#environments-in-which-the-operation-was-tested" aria-hidden="true">#</a> Environments in which the operation was tested</h2><h3 id="oracle-cloud-infrastructure" tabindex="-1"><a class="header-anchor" href="#oracle-cloud-infrastructure" aria-hidden="true">#</a> Oracle Cloud Infrastructure</h3><p>This script runs well on following compute shapes complemented by Oracle Cloud Infrastructure Always Free services.</p><ul><li>VM.Standard.E2.1.Micro (AMD)</li><li>VM.Standard.A1.Flex (ARM) [1OCPU RAM6GB or greater]</li></ul><p>Answer to use iptables.</p><h2 id="issues-prs-welcome" tabindex="-1"><a class="header-anchor" href="#issues-prs-welcome" aria-hidden="true">#</a> Issues &amp; PRs Welcome</h2><p>If it does not work in the above environment, it may be a bug. We would appreciate it if you could report it as an issue, with the specified requirements you entered to the script.</p><p>It is difficult to provide assistance for environments other than the above, but we may be able to solve your problem if you provide us with details of your environment.</p><p>Suggestions for features are also welcome.</p><h1 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h1><p>選択肢の選び方や仕様についてなど。</p><h2 id="systemd-or-docker" tabindex="-1"><a class="header-anchor" href="#systemd-or-docker" aria-hidden="true">#</a> Systemd or Docker?</h2><p>v1から、インストールメソッドにsystemdとDockerとを選べるようにしました。</p>',40),r=(0,n.Uk)("Dockerと言っても、"),t=(0,n._)("strong",null,"MisskeyだけをDockerで実行",-1),l=(0,n.Uk)("し、RedisやPostgresなどはホストで直接実行します。"),d=(0,n._)("br",null,null,-1),o={href:"https://gist.github.com/mamemomonga/5549bb69cad8e5618e5527593d4890e0",target:"_blank",rel:"noopener noreferrer"},c=(0,n.Uk)("docker-composeですべての機能を動かす方法については、mamemonongaさんが作成したこちらの記事がおすすめです。"),u=(0,n.uE)('<p>Docker Hubイメージを使う設定であれば、Misskeyのビルドが不要になるため、<strong>一番お勧めです</strong>。<br> ただし、マイグレーションは必要なので、アップデート時にMisskeyを使えない時間がゼロになるわけではありません。<br> また、Misskeyのビルド環境を準備しない(git pullしない)ので、フォークを動かしたくなった時に設定が面倒になります。</p><p>ローカルでDockerをビルドする方式は、パフォーマンス面で非推奨です。</p><p>systemdは、Docker Hubにイメージを上げるまでもないものの、フォークを使いたい場合にお勧めです。</p><p>お勧めする順番は次の通りです。</p><ol><li>Docker Hub</li><li>systemd</li><li>Dockerビルド</li></ol><h2 id="nginxを使うかどうか" tabindex="-1"><a class="header-anchor" href="#nginxを使うかどうか" aria-hidden="true">#</a> nginxを使うかどうか</h2><p>サーバー1台でMisskeyを構築する場合は、nginxの使用をお勧めします。</p>',7),h=(0,n.Uk)("ロードバランサーを設置する場合にはnginxをインストールせず、"),p={href:"https://github.com/misskey-dev/misskey/blob/develop/docs/examples/misskey.nginx",target:"_blank",rel:"noopener noreferrer"},m=(0,n.Uk)("Misskeyのnginx設定"),b=(0,n.Uk)("を参考にロードバランサーを設定するのがよいと思います。"),g=(0,n.uE)('<h2 id="add-more-swaps" tabindex="-1"><a class="header-anchor" href="#add-more-swaps" aria-hidden="true">#</a> Add more swaps!</h2><p>スワップを設定している場合、メモリが合計で3GB以上でなければスクリプトが動作しないようになっています。</p><h2 id="途中で失敗してまたスクリプトを実行する場合" tabindex="-1"><a class="header-anchor" href="#途中で失敗してまたスクリプトを実行する場合" aria-hidden="true">#</a> 途中で失敗してまたスクリプトを実行する場合</h2><p>万が一途中で失敗してもう一度スクリプトを動作させる場合、次のことに注意してください。</p><ul><li>RedisやPostgresのインストールが終わっている場合、「install locally」はNoにしてください。<br> host・port設定はそのままEnterを押します。 ユーザー名やパスワードは、前回実行した際に指定したものを入力します。</li></ul><h2 id="envファイルについて" tabindex="-1"><a class="header-anchor" href="#envファイルについて" aria-hidden="true">#</a> .envファイルについて</h2><p>インストールスクリプトは、2つの.envファイルを作成します。<br> アップデートの際に使用します。</p><h3 id="root-misskey-env" tabindex="-1"><a class="header-anchor" href="#root-misskey-env" aria-hidden="true">#</a> /root/.misskey.env</h3><p>misskeyを実行するユーザーを覚えておくために必要です。</p><h3 id="home-misskeyユーザー-misskey-env" tabindex="-1"><a class="header-anchor" href="#home-misskeyユーザー-misskey-env" aria-hidden="true">#</a> /home/(misskeyユーザー)/.misskey.env</h3><p>systemdの場合に生成されます。<br> 主にディレクトリを覚えておくのに使用します。</p><h3 id="home-misskeyユーザー-misskey-docker-env" tabindex="-1"><a class="header-anchor" href="#home-misskeyユーザー-misskey-docker-env" aria-hidden="true">#</a> /home/(misskeyユーザー)/.misskey-docker.env</h3><p>Dockerの場合に生成されます。<br> 実行されているコンテナとイメージの番号を保存しています。<br> コンテナの番号はアップデートの際に更新されます。古いイメージは削除されます。</p><h2 id="自分で管理する" tabindex="-1"><a class="header-anchor" href="#自分で管理する" aria-hidden="true">#</a> 自分で管理する</h2><p>インストール後、構成を変更する際に役立つかもしれないメモです。</p><p>&quot;example.com&quot;を自分のドメインに置き換えて読んでください。</p><h3 id="misskeyディレクトリ" tabindex="-1"><a class="header-anchor" href="#misskeyディレクトリ" aria-hidden="true">#</a> Misskeyディレクトリ</h3><p>Misskeyのソースは<code>/home/ユーザー/ディレクトリ</code>としてcloneされます。<br> （ユーザー、ディレクトリの初期値はともにmisskeyです。）</p><p>Misskeyディレクトリへは、以下のように移動するとよいでしょう。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo -iu ユーザー\ncd ディレクトリ\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>もとのユーザーに戻るにはexitを実行します。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>exit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="systemd" tabindex="-1"><a class="header-anchor" href="#systemd" aria-hidden="true">#</a> systemd</h3><p>systemdのプロセス名はexample.comです。<br> たとえば再起動するには次のようにします。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo systemctl restart example.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>journalctlでログを確認できます。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>journalctl -t example.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>設定ファイルは<code>/etc/systemd/system/example.com.service</code>として保存されています。</p><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h3><p>DockerはMisskeyユーザーでrootless実行されています。</p><p>sudo でMisskeyユーザーに入るときは、<code>XDG_RUNTIME_DIR</code>と<code>DOCKER_HOST</code>を変更する必要があります。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo -iu ユーザー\nexport XDG_RUNTIME_DIR=/run/user/$UID\nexport DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock\n\n# プロセス一覧を表示\ndocker ps\n\n# ログを表示\ndocker logs --tail 50 -f コンテナID\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>ワンライナーなら次のようにします。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo -u ユーザー XDG_RUNTIME_DIR=/run/user/$(id -u ユーザー) DOCKER_HOST=unix:///run/user/$(id -u ユーザー)/docker.sock docker ps\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> nginx</h3><p>nginxの設定は<code>/etc/nginx/conf.d/example.com.conf</code>として保存されています。</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><p>requirepassとbindを<code>/etc/redis/misskey.conf</code>で設定しています。</p><h2 id="q-アップデート後に502でアクセスできない" tabindex="-1"><a class="header-anchor" href="#q-アップデート後に502でアクセスできない" aria-hidden="true">#</a> Q. アップデート後に502でアクセスできない</h2><p>Dockerでは、起動後にマイグレーションをするため、すぐにアクセスできません。<br> マイグレーションが終わっているかどうか確認してみてください。</p><p>それでもアップデート後にアクセスできない、ということが稀にあります。</p><p>もしくは、yarn installに失敗しているというものです。</p><p>Misskeyディレクトリで次の内容を実行し、もう一度アップデートを実行してみてください。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm run cleanall\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>journalctlでログを確認すると、たいていre2が云々という記述が見当たります。</p><h2 id="q-同じサーバーにもう1つmisskeyを建てたい" tabindex="-1"><a class="header-anchor" href="#q-同じサーバーにもう1つmisskeyを建てたい" aria-hidden="true">#</a> Q. 同じサーバーにもう1つMisskeyを建てたい</h2><p>スクリプトは同じサーバーに追加でMisskeyをインストールすることは想定していません。<br> 幾つかの設定が上書きされるか、途中でエラーになってしまうでしょう。</p>',47),v={},k=(0,a(3744).Z)(v,[["render",function(e,s){const a=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[i,(0,n._)("p",null,[r,t,l,d,(0,n._)("a",o,[c,(0,n.Wm)(a)])]),u,(0,n._)("p",null,[h,(0,n._)("a",p,[m,(0,n.Wm)(a)]),b]),g],64)}]])},3744:(e,s)=>{s.Z=(e,s)=>{for(const[a,n]of s)e[a]=n;return e}},9836:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n={key:"v-051c00ec",path:"/en/docs/install/bash.html",title:"Misskey install shell script v1.4.0",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"License",slug:"license",children:[]},{level:2,title:"Ingredients",slug:"ingredients",children:[]},{level:2,title:"Configure Cloudflare",slug:"configure-cloudflare",children:[]},{level:2,title:"Procedures",slug:"procedures",children:[{level:3,title:"1. SSH",slug:"_1-ssh",children:[]},{level:3,title:"2. Clean up",slug:"_2-clean-up",children:[]},{level:3,title:"3. Start the installation",slug:"_3-start-the-installation",children:[]},{level:3,title:"4. To update",slug:"_4-to-update",children:[]}]},{level:2,title:"Environments in which the operation was tested",slug:"environments-in-which-the-operation-was-tested",children:[{level:3,title:"Oracle Cloud Infrastructure",slug:"oracle-cloud-infrastructure",children:[]}]},{level:2,title:"Issues & PRs Welcome",slug:"issues-prs-welcome",children:[]},{level:2,title:"Systemd or Docker?",slug:"systemd-or-docker",children:[]},{level:2,title:"nginxを使うかどうか",slug:"nginxを使うかどうか",children:[]},{level:2,title:"Add more swaps!",slug:"add-more-swaps",children:[]},{level:2,title:"途中で失敗してまたスクリプトを実行する場合",slug:"途中で失敗してまたスクリプトを実行する場合",children:[]},{level:2,title:".envファイルについて",slug:"envファイルについて",children:[{level:3,title:"/root/.misskey.env",slug:"root-misskey-env",children:[]},{level:3,title:"/home/(misskeyユーザー)/.misskey.env",slug:"home-misskeyユーザー-misskey-env",children:[]},{level:3,title:"/home/(misskeyユーザー)/.misskey-docker.env",slug:"home-misskeyユーザー-misskey-docker-env",children:[]}]},{level:2,title:"自分で管理する",slug:"自分で管理する",children:[{level:3,title:"Misskeyディレクトリ",slug:"misskeyディレクトリ",children:[]},{level:3,title:"systemd",slug:"systemd",children:[]},{level:3,title:"Docker",slug:"docker",children:[]},{level:3,title:"nginx",slug:"nginx",children:[]},{level:3,title:"Redis",slug:"redis",children:[]}]},{level:2,title:"Q. アップデート後に502でアクセスできない",slug:"q-アップデート後に502でアクセスできない",children:[]},{level:2,title:"Q. 同じサーバーにもう1つMisskeyを建てたい",slug:"q-同じサーバーにもう1つmisskeyを建てたい",children:[]}],filePathRelative:"en/docs/install/bash.md",git:{updatedTime:1639513848e3,contributors:[{name:"tamaina",email:"tamaina@hotmail.co.jp",commits:1}]},relatedPages:[{title:"Create your own Misskey instance",path:"/en/docs/install.html",summary:""}]}}}]);